{"version":3,"sources":["Components/OnOff/OnOff.tsx","Components/UncontrolledAccordion/UncontrolledAccordion.tsx","Components/UncontrolledRating/UncontrolledRating.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["OnOff","props","useState","on","setOnOff","onStyle","width","height","border","display","padding","backgroundColor","offStyle","marginLeft","indicatorStyle","borderRadius","style","onClick","AccordionTitle","console","log","title","AccordionBody","UncontrolledAccordion","collapsed","setCollapsed","titleValue","UncontrolledRating","value","setValue","Star","selected","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQAkDeA,MA5Cf,SAAeC,GAAuB,IAAD,EAEbC,oBAAkB,GAFL,mBAE7BC,EAF6B,KAEzBC,EAFyB,KAI3BC,EAAU,CACZC,MAAO,OACPC,OAAQ,OACRC,OAAQ,kBACRC,QAAS,eACTC,QAAQ,MACRC,gBAAgBR,EAAK,QAAU,SAI7BS,EAAW,CACbN,MAAO,OACPC,OAAQ,OACRC,OAAQ,kBACRC,QAAS,eACTI,WAAY,MACZH,QAAQ,MACRC,gBAAgBR,EAAK,QAAU,OAG7BW,EAAiB,CACnBR,MAAO,OACPC,OAAQ,OACRQ,aAAc,MACdP,OAAQ,kBACRC,QAAS,eACTI,WAAY,MACZF,gBAAgBR,EAAK,QAAU,OAIvC,OACI,6BACI,yBAAKa,MAAOX,EAASY,QAAS,WAAKb,GAAS,KAA5C,MACA,yBAAKY,MAAOJ,EAAUK,QAAS,WAAKb,GAAS,KAA7C,OACA,yBAAKY,MAAOF,EAAgBG,QAAS,iBCtB7C,SAASC,EAAejB,GAEpB,OADAkB,QAAQC,IAAI,2BAER,4BAAKnB,EAAMoB,OAInB,SAASC,IAEL,OADAH,QAAQC,IAAI,0BAER,4BACI,iCACA,iCACA,kCAKGG,MAnCf,SAA+BtB,GAC3BkB,QAAQC,IAAI,kCADyC,MAGtBlB,oBAAkB,GAHI,mBAGjDsB,EAHiD,KAGtCC,EAHsC,KAKjD,OACI,6BACI,kBAACP,EAAD,CAAgBG,MAAOpB,EAAMyB,aAAa,4BAAQT,QAAS,WAAMQ,GAAcD,KAArC,WACxCA,GAAa,kBAACF,EAAD,QCPxB,SAASK,EAAmB1B,GAC/BkB,QAAQC,IAAI,gCAD0C,MAG/BlB,mBAAsB,GAHS,mBAGlD0B,EAHkD,KAG3CC,EAH2C,KAKtD,OACI,6BACI,kBAACC,EAAD,CAAMC,SAAUH,EAAM,IAAI,4BAAQX,QAAS,WAAKY,EAAS,KAA/B,KAC1B,kBAACC,EAAD,CAAMC,SAAUH,EAAM,IAAI,4BAAQX,QAAS,WAAKY,EAAS,KAA/B,KAC1B,kBAACC,EAAD,CAAMC,SAAUH,EAAM,IAAI,4BAAQX,QAAS,WAAKY,EAAS,KAA/B,KAC1B,kBAACC,EAAD,CAAMC,SAAUH,EAAM,IAAI,4BAAQX,QAAS,WAAKY,EAAS,KAA/B,KAC1B,kBAACC,EAAD,CAAMC,SAAUH,EAAM,IAAI,4BAAQX,QAAS,WAAKY,EAAS,KAA/B,MAStC,SAASC,EAAK7B,GACV,OACI,8BAAOA,EAAM8B,SAAW,mCAAc,SCwB/BC,MA3Cf,WAII,OAHAb,QAAQC,IAAI,iBAIR,yBAAKa,UAAU,OACX,6BASI,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,CAAuBP,WAAY,SACnC,kBAAC,EAAD,CAAuBA,WAAY,UAEnC,kBAACC,EAAD,CAAoBC,MAAO,OCtBvBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.21993a2a.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\ntype OnOffPropsType = {\r\n    //on: boolean\r\n}\r\n\r\nfunction OnOff(props:OnOffPropsType) {\r\n\r\n    let[on, setOnOff] = useState<boolean>(false);\r\n\r\n    const onStyle = {\r\n        width: \"30px\",\r\n        height: \"20px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        padding:\"2px\",\r\n        backgroundColor:on ? \"green\" : \"white\",\r\n\r\n\r\n    }\r\n    const offStyle = {\r\n        width: \"30px\",\r\n        height: \"20px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        marginLeft: \"2px\",\r\n        padding:\"2px\",\r\n        backgroundColor:on ? \"white\" : \"red\",\r\n\r\n    }\r\n    const indicatorStyle = {\r\n        width: \"10px\",\r\n        height: \"10px\",\r\n        borderRadius: \"5px\",\r\n        border: \"1px solid black\",\r\n        display: \"inline-block\",\r\n        marginLeft: \"5px\",\r\n        backgroundColor:on ? \"green\" : \"red\",\r\n\r\n    }\r\n\r\nreturn (\r\n    <div>\r\n        <div style={onStyle} onClick={()=>{setOnOff(true)}}>On</div>\r\n        <div style={offStyle} onClick={()=>{setOnOff(false)}}>Off</div>\r\n        <div style={indicatorStyle} onClick={()=>{}}></div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default OnOff;","import React, {useState} from \"react\";\r\n\r\ntype AccordionPropsType = {\r\n    titleValue: string\r\n}\r\n\r\nfunction UncontrolledAccordion(props:AccordionPropsType) {\r\n    console.log(\"UncontrolledAccordion rendered\")\r\n\r\n    let[collapsed, setCollapsed] = useState<boolean>(true);\r\n\r\n        return(\r\n            <div>\r\n                <AccordionTitle title={props.titleValue}/><button onClick={()=> {setCollapsed(!collapsed)}}>Toggle</button>\r\n                {!collapsed && <AccordionBody />}\r\n            </div>\r\n        )\r\n}\r\n\r\ntype AccordionTitlePropsType = {\r\n    title:string\r\n}\r\n\r\nfunction AccordionTitle(props:AccordionTitlePropsType) {\r\n    console.log(\"AccordionTitleRendering\")\r\n    return(\r\n        <h3>{props.title}</h3>\r\n    )\r\n}\r\n\r\nfunction AccordionBody() {\r\n    console.log(\"AccordionBodyRendering\")\r\n    return(\r\n        <ul>\r\n            <li>1</li>\r\n            <li>2</li>\r\n            <li>3</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default UncontrolledAccordion;","import React, {useState} from \"react\";\r\nimport {spawn} from \"child_process\";\r\n\r\ntype RatingPropsType = {\r\n    value:0|1|2|3|4|5\r\n}\r\n\r\nexport function UncontrolledRating(props:RatingPropsType) {\r\n    console.log(\"UncontrolledRating rendering\")\r\n\r\n    let[value, setValue] = useState<0|1|2|3|4|5>(0);\r\n\r\n    return (\r\n        <div>\r\n            <Star selected={value>0}/><button onClick={()=>{setValue(1)}}>1</button>\r\n            <Star selected={value>1}/><button onClick={()=>{setValue(2)}}>2</button>\r\n            <Star selected={value>2}/><button onClick={()=>{setValue(3)}}>3</button>\r\n            <Star selected={value>3}/><button onClick={()=>{setValue(4)}}>4</button>\r\n            <Star selected={value>4}/><button onClick={()=>{setValue(5)}}>5</button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype StarPropsType = {\r\n    selected:boolean\r\n}\r\n\r\nfunction Star(props:StarPropsType) {\r\n    return (\r\n        <span>{props.selected ? <b>star</b> : \"star \"}</span>\r\n    )\r\n    console.log(\"Start rendering\")\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Accordion from \"./Components/Accordion/Accordion\";\r\nimport {Rating} from \"./Components/Rating/Rating\";\r\nimport OnOff from \"./Components/OnOff/OnOff\";\r\nimport UncontrolledAccordion from \"./Components/UncontrolledAccordion/UncontrolledAccordion\";\r\nimport {UncontrolledRating} from \"./Components/UncontrolledRating/UncontrolledRating\";\r\n\r\n\r\n// function declaration\r\nfunction App() {\r\n    console.log(\"App rendering\")\r\n    // вот здесь функция может делать штото полезное\r\n    // в конце функция обязана вернуть какойто результат, возвращают JSX\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n\r\n                {/*                 <UncontrolledRating value={0} />\r\n                <UncontrolledRating value={1} />\r\n                <UncontrolledRating value={2} />\r\n                <UncontrolledRating value={3} />\r\n                <UncontrolledRating value={4} />\r\n                <UncontrolledRating value={5} />*/}\r\n\r\n                <hr />\r\n                <OnOff/>\r\n                <OnOff/>\r\n                <OnOff/>\r\n                <OnOff/>\r\n                <hr />\r\n                <UncontrolledAccordion titleValue={\"Menu\"} />\r\n                <UncontrolledAccordion titleValue={\"Users\"} />\r\n\r\n                <UncontrolledRating value={2} />\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype PageTitlePropsType = {\r\n    title:string\r\n}\r\n\r\nfunction PageTitle(props:PageTitlePropsType) {\r\n    console.log(\"AppTitle rendering\")\r\n    return(\r\n        <h1>{props.title}</h1>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n// function expression\r\nconst App2 = function () {\r\n\r\n}\r\n// стрелочная функция, для обработчика собитий\r\nconst App3 = ()=>{\r\n\r\n}*/\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}